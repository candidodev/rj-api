generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  idcategory Int    @id
  nome       String @db.VarChar(45)
  post       post[]
}

model comment {
  user_iduser Int       @db.UnsignedInt
  post_idpost Int       @db.UnsignedInt
  comment     String    @db.TinyText
  time        DateTime? @db.DateTime(0)
  post        post      @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_post2")
  user        user      @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_user2")

  @@id([user_iduser, post_idpost])
  @@index([post_idpost], map: "fk_user_has_post_post2_idx")
  @@index([user_iduser], map: "fk_user_has_post_user2_idx")
}

model image {
  idimage     Int    @id @unique(map: "idimage_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  image       String @db.VarChar(45)
  post_idpost Int    @db.UnsignedInt
  post        post   @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_image_post1")

  @@index([post_idpost], map: "fk_image_post1_idx")
}

model post {
  idpost                Int         @id @unique(map: "idpost_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  content               String      @db.TinyText
  user_iduser           Int         @db.UnsignedInt
  categoria_idcategoria Int
  time                  DateTime    @db.DateTime(0)
  comment               comment[]
  image                 image[]
  category              category    @relation(fields: [categoria_idcategoria], references: [idcategory], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_categoria1")
  user                  user        @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_user")
  user_like             user_like[]

  @@index([categoria_idcategoria], map: "fk_post_categoria1_idx")
  @@index([user_iduser], map: "fk_post_user_idx")
}

model user {
  iduser                      Int         @id @unique(map: "iduser_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name                        String      @db.VarChar(45)
  e_mail                      String      @unique(map: "e_mail") @db.VarChar(60)
  passwordHash                String      @db.VarChar(255)
  fone                        String?     @unique(map: "unique_fone") @db.VarChar(12)
  createdAt                   DateTime    @default(now()) @db.DateTime(0)
  updatedAt                   DateTime    @default(now()) @db.DateTime(0)
  passwordResetToken          String?     @db.VarChar(255)
  passwordResetTokenExpiresAt DateTime?   @db.DateTime(0)
  comment                     comment[]
  post                        post[]
  user_like                   user_like[]
}

model user_like {
  user_iduser Int  @db.UnsignedInt
  post_idpost Int  @db.UnsignedInt
  post        post @relation(fields: [post_idpost], references: [idpost], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_post1")
  user        user @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_post_user1")

  @@id([user_iduser, post_idpost])
  @@index([post_idpost], map: "fk_user_has_post_post1_idx")
  @@index([user_iduser], map: "fk_user_has_post_user1_idx")
}
